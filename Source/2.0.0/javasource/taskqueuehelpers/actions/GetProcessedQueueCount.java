// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package taskqueuehelpers.actions;

import java.util.HashMap;
import java.util.stream.Collectors;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;
import taskqueuehelpers.proxies.ProcessedQueueCount;

/**
 * Creates a List of ProcessedQueueCount entities grouped by queue name. The grouping will aggregate the comlpeted and non-completed count of each queue based on status.
 */
public class GetProcessedQueueCount extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private java.util.List<IMendixObject> __processedQueueTasks;
	private java.util.List<system.proxies.ProcessedQueueTask> processedQueueTasks;

	public GetProcessedQueueCount(IContext context, java.util.List<IMendixObject> processedQueueTasks)
	{
		super(context);
		this.__processedQueueTasks = processedQueueTasks;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.processedQueueTasks = new java.util.ArrayList<system.proxies.ProcessedQueueTask>();
		if (__processedQueueTasks != null)
			for (IMendixObject __processedQueueTasksElement : __processedQueueTasks)
				this.processedQueueTasks.add(system.proxies.ProcessedQueueTask.initialize(getContext(), __processedQueueTasksElement));

		// BEGIN USER CODE
		IContext ctx = getContext();

		HashMap<String, IMendixObject> map = new HashMap<>();

		for (system.proxies.ProcessedQueueTask task : processedQueueTasks) {
			String qname = task.getQueueName();

			IMendixObject counts = map.computeIfAbsent(qname, key -> {
				IMendixObject newcounts = Core.instantiate(ctx, ProcessedQueueCount.entityName);
				newcounts.setValue(ctx, "QueueName", qname);
				return newcounts;
			});

			String status = task.getStatus().toString();
			String countAttr = status.equals("Completed") ? "CompletedCount" : "NonCompletedCount";
			Long count = counts.getValue(ctx, countAttr);
			counts.setValue(ctx, countAttr, count + 1);

			map.put(qname, counts);
		}

		return map.values().stream().collect(Collectors.toList());
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetProcessedQueueCount";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
