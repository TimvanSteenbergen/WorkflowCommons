// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package workflowcommonsunittests.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.MendixRuntimeException;
import com.mendix.systemwideinterfaces.core.IContext;

public class Microflows
{
	// These are the microflows for the WorkflowCommonsUnitTests module
	public static void aCT_ExecuteAllWFCommonsUnitTests(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("WorkflowCommonsUnitTests.ACT_ExecuteAllWFCommonsUnitTests").withParams(params).execute(context);
	}
	public static void completeUserTask(IContext context, system.proxies.WorkflowInstance _workflowInstance)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowInstance", _workflowInstance == null ? null : _workflowInstance.getMendixObject());
		Core.microflowCall("WorkflowCommonsUnitTests.CompleteUserTask").withParams(params).execute(context);
	}
	public static void createAndStartExpenseRequestWorkflow(IContext context, java.lang.String _action, workflowcommonsunittests.proxies.UnitTestRun _unitTestRun)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Action", _action);
		params.put("UnitTestRun", _unitTestRun == null ? null : _unitTestRun.getMendixObject());
		Core.microflowCall("WorkflowCommonsUnitTests.CreateAndStartExpenseRequestWorkflow").withParams(params).execute(context);
	}
	public static void setup_CleanUp(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("WorkflowCommonsUnitTests.Setup_CleanUp").withParams(params).execute(context);
	}
	public static void setup_WorkflowInstances(IContext context, workflowcommonsunittests.proxies.UnitTestRun _unitTestRun, java.lang.String _action, java.lang.Long _amount)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("UnitTestRun", _unitTestRun == null ? null : _unitTestRun.getMendixObject());
		params.put("Action", _action);
		params.put("Amount", _amount);
		Core.microflowCall("WorkflowCommonsUnitTests.Setup_WorkflowInstances").withParams(params).execute(context);
	}
	public static void tASK_ExpenseRequest_UnitTestRun_UpdateAndExecuteUnitTestsWhenAllSetup(IContext context, expenserequestexample.proxies.ExpenseRequest _expenseRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ExpenseRequest", _expenseRequest == null ? null : _expenseRequest.getMendixObject());
		Core.microflowCall("WorkflowCommonsUnitTests.TASK_ExpenseRequest_UnitTestRun_UpdateAndExecuteUnitTestsWhenAllSetup").withParams(params).execute(context);
	}
	public static void tASK_StartExpenseRequestWorkflowForUnitTest(IContext context, expenserequestexample.proxies.ExpenseRequest _expenseRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ExpenseRequest", _expenseRequest == null ? null : _expenseRequest.getMendixObject());
		Core.microflowCall("WorkflowCommonsUnitTests.TASK_StartExpenseRequestWorkflowForUnitTest").withParams(params).execute(context);
	}
	public static void tASK_WorkflowUserTask_ExecuteFollowupActions(IContext context, expenserequestexample.proxies.ExpenseRequest _expenseRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ExpenseRequest", _expenseRequest == null ? null : _expenseRequest.getMendixObject());
		Core.microflowCall("WorkflowCommonsUnitTests.TASK_WorkflowUserTask_ExecuteFollowupActions").withParams(params).execute(context);
	}
	public static void teardown(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("WorkflowCommonsUnitTests.Teardown").withParams(params).execute(context);
	}
	public static void unitTestRun_UpdateAndExecuteUnitTestsWhenAllSetup(IContext context, expenserequestexample.proxies.ExpenseRequest _expenseRequest)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("ExpenseRequest", _expenseRequest == null ? null : _expenseRequest.getMendixObject());
		Core.microflowCall("WorkflowCommonsUnitTests.UnitTestRun_UpdateAndExecuteUnitTestsWhenAllSetup").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_AverageHandlingTime(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_AverageHandlingTime").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountAbortedWorkflows(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountAbortedWorkflows").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountAverageHandlingTime(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountAverageHandlingTime").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountCompletedOntimeUserTasks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountCompletedOntimeUserTasks").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountCompletedOnTimeWorkflows(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountCompletedOnTimeWorkflows").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountCompletedOverdueUserTasks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountCompletedOverdueUserTasks").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountCompletedOverdueWorkflows(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountCompletedOverdueWorkflows").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountCompletedUserTasks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountCompletedUserTasks").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountCompletedWorkflows(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountCompletedWorkflows").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountFailedUserTasks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountFailedUserTasks").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountInProgressUserTasks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountInProgressUserTasks").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountInProgressWorkflows(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountInProgressWorkflows").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountOverdueUserTasks(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountOverdueUserTasks").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_CountOverdueWorkflows(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_CountOverdueWorkflows").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_RetrieveOrCreateDashboardContext(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_RetrieveOrCreateDashboardContext").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_RetrieveOrCreateTaskSummary(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_RetrieveOrCreateTaskSummary").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_RetrieveOrCreateWorkflowSummary(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_RetrieveOrCreateWorkflowSummary").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_TaskSeriesCreateOrUpdate(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_TaskSeriesCreateOrUpdate").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_TaskSummaryCreateOrUpdateAdmin(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_TaskSummaryCreateOrUpdateAdmin").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_TaskSummaryCreateOrUpdateUser(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_TaskSummaryCreateOrUpdateUser").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_TestUpdateSettingsDefault(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_TestUpdateSettingsDefault").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_WorkflowSeriesCreateOrUpdate(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_WorkflowSeriesCreateOrUpdate").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_WorkflowSummaryCreateOrUpdate(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_WorkflowSummaryCreateOrUpdate").withParams(params).execute(context);
	}
	public static boolean uT_WorkflowDashboard_WorkflowTaskDetailsCreateOrUpdate(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommonsUnitTests.UT_WorkflowDashboard_WorkflowTaskDetailsCreateOrUpdate").withParams(params).execute(context);
	}
}